import os
import subprocess
import argparse
import sys
from dotenv import load_dotenv

# Gemini specific imports
from google import generativeai as genai
from google.generativeai import types 
from google.generativeai import GenerationConfig

# --- Config Options --- 
NMAP_DEFAULT_OUTPUT_FILE = "nmap_scan_report.xml" # Default filename if -o not included in command line
GEMINI_MODEL = "gemini-1.5-flash" # Or other compatible model

def run_nmap_scan(target, output_filename):
    """
    Runs an nmap vulnerability scan on the target and saves the output to an XML file.
    Automatically adds --unprivileged flag on Windows.
    """
    print(f"[*] Starting Nmap scan on target: {target}...")

    # Base Nmap command parts
    # -sV: Version detection
    # --script vuln: Run vulnerability scanning scripts
    # -oX: Output in XML format
    nmap_command_base = ["nmap", "-sV", "--script", "vuln", "-oX", output_filename]

    # Check if user is on a Windows device
    if sys.platform == "win32": # Windows requires "unprivileded" flag if you've got a VPN network device, which I do...
        print("[i] Detected Windows platform. Using --unprivileged mode.")
        nmap_command = nmap_command_base + ["--unprivileged", target]
        # Define encoding arguments for Windows subprocess robustness
        subproc_encoding_args = {'encoding': 'utf-8', 'errors': 'ignore'}
    else:
        # For every other non-Windows platform
        nmap_command = nmap_command_base + [target]
        subproc_encoding_args = {} # No special encoding needed 

    print(f"[*] Executing command: {' '.join(nmap_command)}")

    try:
        process = subprocess.run(nmap_command,
                                 check=True,         
                                 capture_output=True, # Capture stdout/stderr
                                 text=True,           # Decode stdout/stderr as text
                                 **subproc_encoding_args # Add encoding args if needed (for Windows)
                                 )
        print("[+] Nmap scan completed successfully.")
        print(f"[+] Report saved to: {output_filename}")
        return True, output_filename
    except subprocess.CalledProcessError as e:
        stderr_decoded = e.stderr
        error_message = f"[-] Nmap scan failed with exit code {e.returncode}.\n" \
                        f"[-] Target: {target}\n" \
                        f"[-] Command: {' '.join(nmap_command)}\n" \
                        f"[-] Error Output:\n{stderr_decoded}" # Use the decoded stderr
        print(error_message)
        return False, error_message
    except FileNotFoundError:
        error_message = "[-] Error: 'nmap' command not found. Please ensure nmap is installed and in your system's PATH."
        print(error_message)
        return False, error_message
    except Exception as e:
        error_message = f"[-] An unexpected error occurred during the Nmap scan: {e}"
        print(error_message)
        return False, error_message


def analyze_report_with_gemini(api_key, report_content):
    """
    Sends the Nmap report content to Google Gemini for analysis using GenerativeModel.

    Args:
        api_key (str): Your Google Gemini API key.
        report_content (str): The content of the Nmap scan report (XML format).

    Returns:
        str: The analysis text generated by Gemini, or None if an error occurred.
    """
    print("[*] Sending report to Google Gemini for analysis...")

    try:
        genai.configure(api_key=api_key)

        # system prompt for Gemini
        system_instruction_text = """You are a Cybersecurity expert. You will analyze an Nmap vulnerability scan report (provided in XML format) and provide easy-to-read notes on severe vulnerabilities that need to be addressed. Focus on actionable insights and potential impact. Your main goal is to ensure this is easy to understand for someone who may not be a security expert, without sacrificing important technical details. Structure your response clearly, perhaps grouping findings by host or severity. Highlight the most critical issues first."""

        # user prompt & report content
        user_prompt_text = f"""Please analyze the following Nmap vulnerability scan report (in XML format) and provide a summary of severe vulnerabilities as described in the system instructions.

        Nmap Report:
        ```xml
        {report_content}
        """

        generation_config = GenerationConfig(
            response_mime_type="text/plain",
            # other parameters can be added here as needed
            temperature=0.7
        )

        model = genai.GenerativeModel(
            model_name=GEMINI_MODEL, 
            system_instruction=system_instruction_text,
            generation_config=generation_config
        )

        # Generate content
        response = model.generate_content(user_prompt_text)

        print("[+] Analysis received from Gemini.")
        return response.text

    except Exception as e:
        print(f"[-] Error communicating with Google Gemini API: {e}")
        return None
    
# --- Main Execution ---
if __name__ == "__main__": 
    load_dotenv()
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        print("[-] Error: GEMINI_API_KEY not found in environment variables.")
        sys.exit(1)

    # Set up argument parser
    parser = argparse.ArgumentParser(description="Nmap Vulnerability Scanner and Report Analyzer")
    parser.add_argument("target", help="Target IP address, hostname, or network range to scan")
    # Add the arguments for output file and report saving
    parser.add_argument("-o", "--output", default=NMAP_DEFAULT_OUTPUT_FILE,
                        help=f"Output filename for the Nmap XML report (default: {NMAP_DEFAULT_OUTPUT_FILE})")
    parser.add_argument("--keep-report", action="store_true",
                        help="Keep the Nmap XML report file after analysis.")
    args = parser.parse_args() # Now parses all defined arguments

    # Run Nmap scan using the filename from arguments
    scan_success, output_file_path = run_nmap_scan(args.target, args.output) # Use args.output

    if scan_success:
        report_content = None
        try:
            # Read the Nmap report content using the correct path
            with open(output_file_path, "r", encoding='utf-8') as file:
                report_content = file.read()
            if not report_content:
                print(f"[-] Error: Nmap report file '{output_file_path}' is empty.")
                sys.exit(1) # Exit if report is empty

        except FileNotFoundError:
            print(f"[-] Error: Could not find the Nmap report file '{output_file_path}'.")
            sys.exit(1)
        except Exception as e:
            print(f"[-] Error reading Nmap report file '{output_file_path}': {e}")
            sys.exit(1)

        if report_content:
            # Analyze the report with Google Gemini
            analysis_result = analyze_report_with_gemini(api_key, report_content)

            if analysis_result:
                print("\n--- Gemini Vulnerability Analysis ---")
                print(analysis_result)
                print("-------------------------------------\n")
            else:
                print("[-] Failed to get analysis from Google Gemini.")
                # Keep the report if analysis failed
                print(f"[*] Nmap report file kept at: {output_file_path}")
                sys.exit(1) # Exit if analysis failed

        # Cleanup (optional) - Use the correct output file path
        if not args.keep_report:
            try:
                os.remove(output_file_path)
                print(f"[*] Temporary Nmap report file '{output_file_path}' removed.")
            except OSError as e:
                print(f"[-] Warning: Could not remove Nmap report file '{output_file_path}': {e}")

    else:
        print("[-] Nmap scan failed. Exiting.")
        sys.exit(1) # Exit if scan failed initially

    print("[*] Script finished.")